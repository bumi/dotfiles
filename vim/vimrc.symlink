call pathogen#infect()
syntax on
filetype plugin indent on

set nocompatible
" Use UTF-8 without BOM
set encoding=utf-8 nobomb
set enc=utf-8
set noswapfile
set autoindent             " automatic indent new lines
set shell=/bin/zsh
set tabstop=2
set mouse=a
set number
set smartindent
set expandtab              " expand tabs to spaces
set timeoutlen=500              " if you have two commands, ',dv' and ',d' it will take 'timeoutlen' milliseconds to recognize which one you're going for

" Use the OS clipboard by default (on versions compiled with `+clipboard`)
set clipboard=unnamed
" Enhance command-line completion
set wildmenu
" Allow cursor keys in insert mode
set esckeys
" Allow backspace in insert mode
set backspace=indent,eol,start
" Donâ€™t add empty newlines at the end of files
set binary
set noeol
" Centralize backups, swapfiles and undo history
set backupdir=~/.vim/backups
set directory=~/.vim/swaps
if exists("&undodir")
	set undodir=~/.vim/undo
endif

let mapleader = ","


" UI
" ===========================

set ruler                  " show the cursor position all the time
set visualbell             " shut the fuck up

" Highlight current line
set cursorline

set gfn=Menlo:h14
colorscheme smyck

" files
" =================
"
autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript



" plugins:
" ==============================
"
" http://kien.github.com/ctrlp.vim/
set runtimepath^=~/.vim/bundle/ctrlp.vim
set wildignore+=*/tmp/*,*.so,*.swp,*.zip   " Linux/MacOSX
let g:ctrlp_map = '<c-t>'
nnoremap <leader>, :CtrlP<CR> 

set fillchars+=stl:\ ,stlnc:\

" powerline: https://github.com/Lokaltog/vim-powerline
set laststatus=2


" KEYS:
" =========================
"

nnoremap <leader><space> :noh<CR>

" SEARCH:
" ===============
"
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter
set hlsearch                    " highlight search terms
set incsearch                   " start highlighting (partial) matches as soon as you start typing letters after '/'

" Git-Grep.Vim
nnoremap <leader>a :GitGrep 


" TABS
" ==============

map <C-t><up> :tabr<CR>
map <C-t><down> :tabl<CR>
map <D-M-left> :tabp<CR>
map <D-M-right> :tabn<CR>
map <C-t><z> :tabnew<CR>
nmap <C-Delete> :tabclose<CR>
nnoremap <D-w> :q<CR>


" SPLITS
" ================
" window
nmap <leader>H :topleft  vnew<CR>
nmap <leader>L :botright vnew<CR>
nmap <leader>K :topleft  new<CR>
nmap <leader>J :botright new<CR>

" window with test
nmap <leader>HH :topleft  vnew %:p<CR>:A<CR>
nmap <leader>LL :botright vnew %:p<CR>:A<CR>
nmap <leader>KK :topleft  new %:p<CR>:A<CR>
nmap <leader>JJ :botright new %:p<CR>:A<CR>

" buffer
nmap <leader>h :leftabove  vnew<CR>
nmap <leader>l :rightbelow vnew<CR>
nmap <leader>k :leftabove  new<CR>
nmap <leader>j :rightbelow new<CR>

" buffer with test
nmap <leader>hh :leftabove  vnew %:p<CR>:A<CR>
nmap <leader>ll :rightbelow vnew %:p<CR>:A<CR>
nmap <leader>kk :leftabove  new %:p<CR>:A<CR>
nmap <leader>jj :rightbelow new %:p<CR>:A<CR>


" NERDTree
" --------
let NERDTreeWinSize=30
let NERDTreeWinPos='right'
" let NERDTreeShowHidden = 1

" map leader t to toggle NERDTree window
nnoremap <leader>t :NERDTreeTabsToggle<CR>


" NERDTreeToggle
" --------------
let g:nerdtree_tabs_open_on_gui_startup = 0
let g:nerdtree_tabs_open_on_console_startup = 0
" Unfocus NERDTree when leaving a tab for descriptive tab names
let g:nerdtree_tabs_meaningful_tab_names = 1

" Close current tab if there is only one window in it and it's NERDTree
let g:nerdtree_tabs_autoclose = 1

" Synchronize view of all NERDTree windows (scroll and cursor position)
let g:nerdtree_tabs_synchronize_view = 1



" noooo whitespace
" ===============
"
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

autocmd BufWritePre *.py,*.js,*.rb :call <SID>StripTrailingWhitespaces()

